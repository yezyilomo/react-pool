"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9014],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>d});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=o.createContext({}),u=function(t){var e=o.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},c=function(t){var e=u(t.components);return o.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},m=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,l=t.parentName,c=i(t,["components","mdxType","originalType","parentName"]),m=u(n),d=a,k=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return n?o.createElement(k,s(s({ref:e},c),{},{components:n})):o.createElement(k,s({ref:e},c))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:a,s[1]=i;for(var u=2;u<r;u++)s[u]=n[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9330:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},s="Getting Started",i={unversionedId:"introduction/getting_started",id:"introduction/getting_started",title:"Getting Started",description:"Using state-pool to manage state is very simple, all you need to do is",source:"@site/docs/introduction/getting_started.md",sourceDirName:"introduction",slug:"/introduction/getting_started",permalink:"/state-pool/docs/introduction/getting_started",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/introduction/getting_started.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/state-pool/docs/introduction/installation"},next:{title:"Store",permalink:"/state-pool/docs/basic_concepts/store"}},l={},u=[],c={toc:u};function p(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Using ",(0,a.kt)("strong",{parentName:"p"},"state-pool")," to manage state is very simple, all you need to do is"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create and initialize a state by using ",(0,a.kt)("inlineCode",{parentName:"li"},"createState")),(0,a.kt)("li",{parentName:"ol"},"Use your state in your component through ",(0,a.kt)("inlineCode",{parentName:"li"},"useState")," hooks")),(0,a.kt)("p",null,"These two steps summarises pretty much everything you need to use ",(0,a.kt)("strong",{parentName:"p"},"state-pool"),"."),(0,a.kt)("p",null,"Below are few examples showing how to use ",(0,a.kt)("strong",{parentName:"p"},"state-pool")," to manage states."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// Example 1.\nimport React from \'react\';\nimport { createState } from \'state-pool\';\n\n\nconst count = createState(0);  // Create "count" state and initialize it with 0\n\n\nfunction ClicksCounter(props){\n    // Use "count" state\n    const [count, setCount] = count.useState();\n\n    const incrementCount = (e) => {\n        setCount(count+1)\n    }\n\n    return (\n        <div>\n            Count: {count}\n            <br/>\n            <button onClick={incrementCount}>Click</button>\n        </div>\n    );\n}\n\nReactDOM.render(ClicksCounter, document.querySelector("#root"));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,"The other way to do it is using ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"state-pool")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// Example 2.\nimport React from \'react\';\nimport { createState, useState } from \'state-pool\';\n\n\nconst count = createState(0);  // Create "count" state and initialize it with 0\n\n\nfunction ClicksCounter(props){\n    // Use "count" state\n    const [count, setCount] = useState(count);\n\n    const incrementCount = (e) => {\n        setCount(count+1)\n    }\n\n    return (\n        <div>\n            Count: {count}\n            <br/>\n            <button onClick={incrementCount}>Click</button>\n        </div>\n    );\n}\n\nReactDOM.render(ClicksCounter, document.querySelector("#root"));\n')),(0,a.kt)("br",null),(0,a.kt)("h1",{id:"what-about-local-state"},"What about local state?"),(0,a.kt)("p",null,"With ",(0,a.kt)("strong",{parentName:"p"},"state-pool"),", state are just like variables, if declared on a global scope, it\u2019s a global state and if declared on local scope it\u2019s a local state, so the difference between global state and local state in ",(0,a.kt)("strong",{parentName:"p"},"state-pool")," lies where you declare them just like variables."),(0,a.kt)("p",null,"Here is an example for managing local state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// Example 1.\nimport React from 'react';\nimport { useState } from 'state-pool';\n\n\nfunction ClicksCounter(props){\n    // Here `useState` hook will create \"count\" state and initialize it with 0\n    // Note: the `useState` hook used here is impored from state-pool and not react\n    const [count, setCount] = useState(0);\n\n    const incrementCount = (e) => {\n        setCount(count+1)\n    }\n\n    return (\n        <div>\n            Count: {count}\n            <br/>\n            <button onClick={incrementCount}>Click</button>\n        </div>\n    );\n}\n\nReactDOM.render(ClicksCounter, document.querySelector(\"#root\"));\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"If you don't want ",(0,a.kt)("strong",{parentName:"p"},"state-pool's")," ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," to collide with ",(0,a.kt)("strong",{parentName:"p"},"React's")," ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," you can import ",(0,a.kt)("inlineCode",{parentName:"p"},"StatePool")," and use the hook from there,"),(0,a.kt)("p",null,"Here is an example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// Example 2.\nimport React from 'react';\nimport StatePool from 'state-pool';\n\n\nfunction ClicksCounter(props){\n    // Here `useState` hook will create \"count\" state and initialize it with 0\n    const [count, setCount] = StatePool.useState(0);\n\n    const incrementCount = (e) => {\n        setCount(count+1)\n    }\n\n    return (\n        <div>\n            Count: {count}\n            <br/>\n            <button onClick={incrementCount}>Click</button>\n        </div>\n    );\n}\n\nReactDOM.render(ClicksCounter, document.querySelector(\"#root\"));\n")),(0,a.kt)("br",null),(0,a.kt)("h1",{id:"isnt-statepoolusestate-the-same-thing-as-reactusestate"},"Isn't ",(0,a.kt)("inlineCode",{parentName:"h1"},"StatePool.useState")," the same thing as ",(0,a.kt)("inlineCode",{parentName:"h1"},"React.useState"),"?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definitely. not!...")),(0,a.kt)("p",null,"Both can be used to manage local state, and that's where the similarity ends. ",(0,a.kt)("inlineCode",{parentName:"p"},"StatePool.useState")," offers more features, for one it offers a simple way to update nested data unlike ",(0,a.kt)("inlineCode",{parentName:"p"},"React.useState"),", it's also flexible as it's used to manage both global state and local state. So you could say ",(0,a.kt)("inlineCode",{parentName:"p"},"React.useState")," is a subset of ",(0,a.kt)("inlineCode",{parentName:"p"},"StatePool.useState"),"."),(0,a.kt)("p",null,"Here is an example of ",(0,a.kt)("inlineCode",{parentName:"p"},"StatePool.useState")," in action, updating nested data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// Example 2.\nimport React from \'react\';\nimport StatePool from \'state-pool\';\n\n\nconst user = StatePool.createState({name: "Yezy", age: 25});\n\nfunction UserInfo(props){\n    const [user, setUser, updateUser] = StatePool.useState(user);\n\n    const updateName = (e) => {\n        updateUser(user => {\n            user.name = e.target.value;\n        });\n    }\n\n    return (\n        <div>\n            Name: {user.name}\n            <br/>\n            <input type="text" value={user.name} onChange={updateName}/>\n        </div>\n    );\n}\n\nReactDOM.render(UserInfo, document.querySelector("#root"));\n')),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"React.useState")," you would need to recreate ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," object when updating ",(0,a.kt)("inlineCode",{parentName:"p"},"user.name"),", but with ",(0,a.kt)("inlineCode",{parentName:"p"},"StatePool.useState")," you don't need that, you just update the value right away. "),(0,a.kt)("p",null,"That's one advantage of using ",(0,a.kt)("inlineCode",{parentName:"p"},"StatePool.useState")," but there are many more, you'll learn when going through ",(0,a.kt)("a",{parentName:"p",href:"https://yezyilomo.github.io/state-pool/"},(0,a.kt)("strong",{parentName:"a"},"documentation"),"\ud83d\udcdd"),"."),(0,a.kt)("h1",{id:"store-based-example"},"Store based example"),(0,a.kt)("p",null,"If you have many states and you would like to organize them into a store, ",(0,a.kt)("strong",{parentName:"p"},"state-pool")," allows you to do that too and provides a tone of features on top of it."),(0,a.kt)("p",null,"Here are steps for managing state with a store"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a store(which is basically a container for your state)"),(0,a.kt)("li",{parentName:"ol"},"Create and initialize a state by using ",(0,a.kt)("inlineCode",{parentName:"li"},"store.setState")),(0,a.kt)("li",{parentName:"ol"},"Use your state in your component through ",(0,a.kt)("inlineCode",{parentName:"li"},"store.useState")," hooks")),(0,a.kt)("p",null,"These three steps summarises pretty much everything you need to manage state with a store."),(0,a.kt)("p",null,"Below are few examples of store in action"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// Example 1.\nimport { createStore } from \'state-pool\';\n\n\nconst store = createStore();  // Create store for storing our state\nstore.setState("count", 0);  // Create "count" state and add it to the store\n\nfunction ClicksCounter(props){\n    // Use "count" state\n    const [count, setCount] = store.useState("count");\n\n    return (\n        <div>\n            Count: {count}\n            <br/>\n            <button onClick={e => setCount(++count)}>Click</button>\n        </div>\n    );\n}\n')),(0,a.kt)("br",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// Example 2.\nimport { createStore } from \'state-pool\';\n\n\n// Instead of using createStore and store.setState,\n// you can combine store creation and initialization as follows\n\nconst store = createStore({"user", {name: "Yezy", age: 25}});  // create store and initialize it with user\n\nfunction UserInfo(props){\n    const [user, setUser, updateUser] = store.useState("user");\n\n    const updateName = (e) => {\n        updateUser(user => {\n            user.name = e.target.value;\n        });\n    }\n\n    return (\n        <div>\n            Name: {user.name}\n            <br/>\n            <input type="text" value={user.name} onChange={updateName}/>\n        </div>\n    );\n}\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"State-pool")," doesn't enforce storing your states in a store, If you don't like using the architecture of store you can still use ",(0,a.kt)("strong",{parentName:"p"},"state-pool")," without it. In ",(0,a.kt)("strong",{parentName:"p"},"state-pool"),", store is just a container for states, so you can still use your states without it, in fact ",(0,a.kt)("strong",{parentName:"p"},"state-pool")," doesn\u2019t care where you store your states as long as you can access them you're good to go."),(0,a.kt)("br",null),(0,a.kt)("p",null,"Pretty cool, right?"))}p.isMDXComponent=!0}}]);