"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8925],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=s.createContext({}),u=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return s.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},p=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,d=p["".concat(i,".").concat(g)]||p[g]||b[g]||r;return n?s.createElement(d,o(o({ref:t},l),{},{components:n})):s.createElement(d,o({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<r;u++)o[u]=n[u];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>b,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var s=n(7462),a=(n(7294),n(3905));const r={sidebar_position:4},o="Managing Subscriptions",c={unversionedId:"basic_concepts/managing_subscriptions",id:"basic_concepts/managing_subscriptions",title:"Managing Subscriptions",description:"If you want to listen to changes from a state you can subscribe to it by using state.subscribe. it accepts an observer function. For example",source:"@site/docs/basic_concepts/managing_subscriptions.md",sourceDirName:"basic_concepts",slug:"/basic_concepts/managing_subscriptions",permalink:"/state-pool/docs/basic_concepts/managing_subscriptions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basic_concepts/managing_subscriptions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Derived & Nested State",permalink:"/state-pool/docs/basic_concepts/derived_state"},next:{title:"State Persistence",permalink:"/state-pool/docs/basic_concepts/state_persistence"}},i={},u=[],l={toc:u};function b(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"managing-subscriptions"},"Managing Subscriptions"),(0,a.kt)("p",null,"If you want to listen to changes from a state you can subscribe to it by using ",(0,a.kt)("inlineCode",{parentName:"p"},"state.subscribe"),". it accepts an observer function. For example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const state = createState(value);\n\n\n// Subscribe to state changes\nconst unsubscribe = state.subscribe(function(value){\n    // value is the new value of a state\n})\n\n// You can unsubscribe by calling the result\nunsubscribe();\n")),(0,a.kt)("p",null,"You can even subscribe to a deeply nested state by using a selector as "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"state.subscribe({\n    observer:  function(value){\n        // value is the new value of a state \n    },\n    selector: function(value){\n        return  selected_state\n    }\n})\n")),(0,a.kt)("p",null,"With this, observer function will only be called when the selected state changes."),(0,a.kt)("p",null,"Another way to subscribe to nested state or derived state is to call ",(0,a.kt)("inlineCode",{parentName:"p"},"select")," on a state then subscribe to it as"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"state.select(state => selected_state).subscribe(value =>{\n        // Do your thing here\n    }\n)\n")),(0,a.kt)("h1",{id:"subscriptions-in-a-store"},"Subscriptions in a store"),(0,a.kt)("p",null,"If you want to listen to changes in an entire store you can subscribe to it by using ",(0,a.kt)("inlineCode",{parentName:"p"},"store.subscribe"),". it accepts an observer function. For example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Subscribe to store changes\nconst unsubscribe = store.subscribe(function(key: String, value: Any){\n    // key is the key for a state that has changed \n    // value is the new value of a state\n})\n\n// You can unsubscribe by calling the result\nunsubscribe();\n")),(0,a.kt)("p",null,"If you want to subscribe to a single state you can use "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Subscribe to store changes\nconst unsubscribe = store.getState(key).subscribe(function(value){\n    // value is the new value of a state\n})\n\n// You can unsubscribe by calling the result\nunsubscribe();\n")),(0,a.kt)("p",null,"You can even subscribe to a deeply nested state by using a selector as "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"store.getState(key).subscribe({\n    observer:  function(value){\n        // value is the new value of a state \n    },\n    selector: function(value){\n        return  selected_state\n    })\n})\n")),(0,a.kt)("p",null,"With this, observer function will only be called when the selected state changes."),(0,a.kt)("p",null,"Another way to subscribe to nested state or derived state is to call ",(0,a.kt)("inlineCode",{parentName:"p"},"select")," on a state then subscribe to it as"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"store.getState(key).select(state => selected_state).subscribe(value =>{\n        // Do your thing here\n    }\n)\n")))}b.isMDXComponent=!0}}]);