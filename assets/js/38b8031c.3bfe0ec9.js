"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5004],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),b=l(r),f=s,d=b["".concat(c,".").concat(f)]||b[f]||p[f]||a;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},6719:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(7462),s=(r(7294),r(3905));const a={sidebar_position:6},o="store.subscribe",i={unversionedId:"api_reference/high_level_api/store.subscribe",id:"api_reference/high_level_api/store.subscribe",title:"store.subscribe",description:"If you want to listen to changes in a store you can subscribe to it by using store.subscribe. it accepts an observer function. For example",source:"@site/docs/api_reference/high_level_api/store.subscribe.md",sourceDirName:"api_reference/high_level_api",slug:"/api_reference/high_level_api/store.subscribe",permalink:"/state-pool/docs/api_reference/high_level_api/store.subscribe",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api_reference/high_level_api/store.subscribe.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"store.getState",permalink:"/state-pool/docs/api_reference/high_level_api/store.getState"},next:{title:"store.remove",permalink:"/state-pool/docs/api_reference/high_level_api/store.remove"}},c={},l=[],u={toc:l};function p(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"storesubscribe"},"store.subscribe"),(0,s.kt)("p",null,"If you want to listen to changes in a store you can subscribe to it by using ",(0,s.kt)("inlineCode",{parentName:"p"},"store.subscribe"),". it accepts an observer function. For example "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Subscribe to store changes\nconst unsubscribe = store.subscribe(function(key: String, value: Any){\n    // key is the key for a state that has changed \n    // value is the new value of a state\n})\n\n// You can unsubscribe by calling the result\nunsubscribe();\n")),(0,s.kt)("p",null,"If you want to subscribe to a single state you can use "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Subscribe to store changes\nconst unsubscribe = store.getState(key).subscribe(function(value){\n    // value is the new value of a state\n})\n\n// You can unsubscribe by calling the result\nunsubscribe();\n")),(0,s.kt)("p",null,"You can even subscribe to a deeply nested state by using a selector as "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"store.getState(key).subscribe({\n    observer:  function(value){\n        // value is the new value of a state \n    },\n    selector: function(value){\n        return  selected_state\n    })\n})\n")),(0,s.kt)("p",null,"With this observer function will only be called when the selected state changes."),(0,s.kt)("p",null,"Another way to subscribe to nested state or derived state is to call ",(0,s.kt)("inlineCode",{parentName:"p"},"select")," on a state then subscribe to it as"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"store.getState(key).select(state => selected_state).subscribe(value =>{\n        // Do your thing here\n    }\n)\n")))}p.isMDXComponent=!0}}]);