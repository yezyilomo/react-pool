"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3884],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,i(i({ref:t},l),{},{components:n})):a.createElement(h,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5037:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},i="useReducer",s={unversionedId:"api_reference/low_level_api/useReducer",id:"api_reference/low_level_api/useReducer",title:"useReducer",description:"This is an alternative to useState, it works just like React.useReducer hook(If you\u2019re familiar with React.useReducer, you already know how this works). It accepts a reducer and a state object or initial state or state initializer as parameters, it returns the current state paired with a dispatch method plus the state object, but in most cases you won't be using stateObject so you'll be okay with [state, dispatch]. In addition to the two parameters it also accept another optinal perameter which is the configuration object, available configurations are selector and patcher they work exactly the same just like in useState.",source:"@site/docs/api_reference/low_level_api/useReducer.md",sourceDirName:"api_reference/low_level_api",slug:"/api_reference/low_level_api/useReducer",permalink:"/state-pool/docs/api_reference/low_level_api/useReducer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api_reference/low_level_api/useReducer.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"useState",permalink:"/state-pool/docs/api_reference/low_level_api/useState"},next:{title:"Typing State",permalink:"/state-pool/docs/api_reference/typing-state"}},c={},u=[],l={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usereducer"},"useReducer"),(0,r.kt)("p",null,"This is an alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"useState"),", it works just like ",(0,r.kt)("inlineCode",{parentName:"p"},"React.useReducer")," hook(If you\u2019re familiar with ",(0,r.kt)("inlineCode",{parentName:"p"},"React.useReducer"),", you already know how this works). It accepts a reducer and a state object or initial state or state initializer as parameters, it returns the current state paired with a dispatch method plus the state object, but in most cases you won't be using ",(0,r.kt)("inlineCode",{parentName:"p"},"stateObject")," so you'll be okay with ",(0,r.kt)("inlineCode",{parentName:"p"},"[state, dispatch]"),". In addition to the two parameters it also accept another optinal perameter which is the configuration object, available configurations are ",(0,r.kt)("inlineCode",{parentName:"p"},"selector")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"patcher")," they work exactly the same just like in ",(0,r.kt)("inlineCode",{parentName:"p"},"useState"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nuseReducer(\n    reducer: Function,\n    state: State,\n    config?: {selector: Function, patcher: Function}\n)\n\n// Or in local state as\n\nuseReducer(\n    reducer: Function,\n    initialState: Any,\n    config?: {selector: Function, patcher: Function}\n)\n\n// Or with lazy state initializer\nuseReducer(\n    reducer: Function,\n    stateInitializer: () => Any,\n    config?: {selector: Function, patcher: Function}\n)\n")),(0,r.kt)("p",null,"Below is a simple example showing how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"useReducer")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const initialState = {\n    name: "Yezy",\n    age: 25,\n    email: "yezy@me.com"\n}\n\nconst user = createState(initialState);\n\nfunction myReducer(state, action){\n    // This could be any reducer\n    // Do whatever you want to do here\n    return newState\n}\n\nfunction Component(props){\n    const [name, dispatch] = useReducer(myReducer, user);\n    \n    // Other stuff ...\n}\n')),(0,r.kt)("p",null,"Below is the same example with ",(0,r.kt)("inlineCode",{parentName:"p"},"selector")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"patcher")," parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const initialState = {\n    name: "Yezy",\n    age: 25,\n    email: "yezy@me.com"\n}\n\nconst user = createState(initialState);\n\n\nfunction myReducer(state, action){\n    // This could be any reducer\n    // Do whatever you want to do here\n    return newState\n}\n\nfunction UserInfo(props){\n    const selector = (user) => user.name;\n    const patcher = (user, name) => {user.name = name};\n    \n    const [name, dispatch] = useReducer(myReducer, user, {selector, patcher});\n\n    // Other stuffs\n}\n')),(0,r.kt)("h1",{id:"using-usereducer-to-manage-local-state"},"Using useReducer to manage local state"),(0,r.kt)("p",null,"Just like in ",(0,r.kt)("inlineCode",{parentName:"p"},"useState"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"useReducer")," can be used to manage local state too."),(0,r.kt)("p",null,"Here is an example for managing local state with ",(0,r.kt)("inlineCode",{parentName:"p"},"useReducer")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useReducer } from 'state-pool';\n\n\nconst myReducer = (state, action) => {\n   // Your computaton here\n   return action;\n}\n\nfunction ClicksCounter(props){\n    // Here `useReducer` hook will create \"count\" state and initialize it with 0\n    // Note: the `useReducer` hook used here is impored from state-pool and not react\n    const [count, dispatch] = useReducer(myReducer, 0);\n\n    const incrementCount = (e) => {\n        dispatch(count+1)\n    }\n\n    return (\n        <div>\n            Count: {count}\n            <br/>\n            <button onClick={incrementCount}>Click</button>\n        </div>\n    );\n}\n\nReactDOM.render(ClicksCounter, document.querySelector(\"#root\"));\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"If you don't want ",(0,r.kt)("strong",{parentName:"p"},"state-pool's")," ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," to collide with ",(0,r.kt)("strong",{parentName:"p"},"React's")," ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," you can import ",(0,r.kt)("inlineCode",{parentName:"p"},"StatePool")," and use the hook from there,"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook is derived from ",(0,r.kt)("inlineCode",{parentName:"p"},"useReducer")," hook, also this hook is used to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"store.useReducer"),".")))}p.isMDXComponent=!0}}]);