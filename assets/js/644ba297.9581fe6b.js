"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3097],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},466:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},s="useState",i={unversionedId:"api_reference/low_level_api/useState",id:"api_reference/low_level_api/useState",title:"useState",description:"useState is a hook that used within a react component to subscribe to a state. useState works just like React.useState hook but it accepts a state object or initial state or state initializer and returns an array of [state, setState, updateState, stateObject] rather than [state, setState], In most cases you won't be using stateObject so you'll be okay with [state, setState, updateState]. In addition to a state object parameter it also accept another optional parameter which is the config object, available configurations are selector & patcher, these parameters works exactly the same as in store.useState. We could say useState is a low level implementation of store.useState.",source:"@site/docs/api_reference/low_level_api/useState.md",sourceDirName:"api_reference/low_level_api",slug:"/api_reference/low_level_api/useState",permalink:"/state-pool/docs/api_reference/low_level_api/useState",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api_reference/low_level_api/useState.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"createState",permalink:"/state-pool/docs/api_reference/low_level_api/createState"},next:{title:"useReducer",permalink:"/state-pool/docs/api_reference/low_level_api/useReducer"}},l={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usestate"},"useState"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useState")," is a hook that used within a react component to subscribe to a state. ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," works just like ",(0,r.kt)("inlineCode",{parentName:"p"},"React.useState")," hook but it accepts a state object or initial state or state initializer and returns an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"[state, setState, updateState, stateObject]")," rather than ",(0,r.kt)("inlineCode",{parentName:"p"},"[state, setState]"),", In most cases you won't be using ",(0,r.kt)("inlineCode",{parentName:"p"},"stateObject")," so you'll be okay with ",(0,r.kt)("inlineCode",{parentName:"p"},"[state, setState, updateState]"),". In addition to a state object parameter it also accept another optional parameter which is the config object, available configurations are ",(0,r.kt)("inlineCode",{parentName:"p"},"selector")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"patcher"),", these parameters works exactly the same as in ",(0,r.kt)("inlineCode",{parentName:"p"},"store.useState"),". We could say ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," is a low level implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"store.useState"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Signature\nuseState(state: State, config?: {selector: Function, patcher: Function})\n\n// Or in local state as\n\nuseState(initialState: Any, config?: {selector: Function, patcher: Function})\n\n// Or with lazy state initializer\n\nuseState(stateInitializer: () => Any, config?: {selector: Function, patcher: Function})\n")),(0,r.kt)("p",null,"Below is a simple example showing how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { createState, useState } from 'state-pool';\n\n\nconst initialState = {\n    name: \"Yezy\",\n    age: 25,\n    email: \"yezy@me.com\"\n}\n\nconst user = createState(initialState);\n\nfunction Component(props){\n    const [user, setUser, updateUser] = useState(user);\n    // Other stuff ...\n}\n")),(0,r.kt)("p",null,"Below is the same example with ",(0,r.kt)("inlineCode",{parentName:"p"},"selector")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"patcher")," configurations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const initialState = {\n    name: "Yezy",\n    age: 25,\n    email: "yezy@me.com"\n}\n\nconst user = createState(initialState);\n\n\nfunction UserName(props){\n    const selector = (user) => user.name;  // Subscribe to user.name only\n    const patcher = (user, name) => {user.name = name};  // Update user.name\n\n    const [name, setName] = useState(user, {selector: selector, patcher: patcher});\n\n    const handleNameChange = (e) => {\n        setName(e.target.value);\n    }\n\n    return (\n        <div>\n            Name: {name}\n            <br/>\n            <input type="text" value={name} onChange={handleNameChange}/>\n        </div>\n    );\n}\n')),(0,r.kt)("h1",{id:"using-usestate-to-manage-local-state"},"Using useState to manage local state"),(0,r.kt)("p",null,"With ",(0,r.kt)("strong",{parentName:"p"},"state-pool"),", state are just like variables, if declared on a global scope, it\u2019s a global state and if declared on local scope it\u2019s a local state, so the difference between global state and local state in ",(0,r.kt)("strong",{parentName:"p"},"state-pool")," lies where you declare them just like variables."),(0,r.kt)("p",null,"Here is an example for managing local state with ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useState } from 'state-pool';\n\n\nfunction ClicksCounter(props){\n    // Here `useState` hook will create \"count\" state and initialize it with 0\n    // Note: the `useState` hook used here is impored from state-pool and not react\n    const [count, setCount] = useState(0);\n\n    const incrementCount = (e) => {\n        setCount(count+1)\n    }\n\n    return (\n        <div>\n            Count: {count}\n            <br/>\n            <button onClick={incrementCount}>Click</button>\n        </div>\n    );\n}\n\nReactDOM.render(ClicksCounter, document.querySelector(\"#root\"));\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"If you don't want ",(0,r.kt)("strong",{parentName:"p"},"state-pool's")," ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," to collide with ",(0,r.kt)("strong",{parentName:"p"},"React's")," ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," you can import ",(0,r.kt)("inlineCode",{parentName:"p"},"StatePool")," and use the hook from there,"),(0,r.kt)("p",null,"Here is an example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// Example 2.\nimport React from 'react';\nimport StatePool from 'state-pool';\n\n\nfunction ClicksCounter(props){\n    // Here `useState` hook will create \"count\" state and initialize it with 0\n    const [count, setCount] = StatePool.useState(0);\n\n    const incrementCount = (e) => {\n        setCount(count+1)\n    }\n\n    return (\n        <div>\n            Count: {count}\n            <br/>\n            <button onClick={incrementCount}>Click</button>\n        </div>\n    );\n}\n\nReactDOM.render(ClicksCounter, document.querySelector(\"#root\"));\n")),(0,r.kt)("p",null,"Here is an example with nested data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useState } from \'state-pool\';\n\n\nfunction UserName(props){\n    const [user, setUser, updateUser] = useState({name: "Yezy", age: 25, email: "yezy@me.com"});\n\n    const handleNameChange = (e) => {\n        updateUser((user) => {\n            user.name = e.target.value\n        })\n    }\n\n    const handleAgeChange = (e) => {\n        updateUser((user) => {\n            user.age = e.target.value\n        })\n    }\n\n    return (\n        <div>\n            <div>Name: {user.name} </div>\n            <div>Age: {user.age} </div>\n            <input type="text" value={user.name} onChange={handleNameChange}/>\n            <input type="text" value={user.age} onChange={handleAgeChange}/>\n        </div>\n    );\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useState")," is used to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"store.useState")," hook.")))}p.isMDXComponent=!0}}]);